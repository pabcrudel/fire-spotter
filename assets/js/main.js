import{fetchFirmsData,fetchOpenWeatherData,propagationAlgorithm}from"./wildfire-tracker.js";import{redIcon,map,drawLinesWithSecondaryLines}from"./map-builder.js";async function main(){const rawCountries=await fetch("assets/js/countries.json"),countries=await rawCountries.json(),country=countryName=>countries.find((country=>country.name===countryName)),sources=["VIIRS_NOAA20_NRT","VIIRS_SNPP_NRT","MODIS_NRT"],defaultSource=sources[0];pointsPrinter(country("Spain"),defaultSource);const countrySelector=document.getElementById("countrySelector");countries.forEach((country=>{const option=document.createElement("option"),name=country.name;option.value=name,option.text=name,"Spain"===name&&(option.selected=!0),countrySelector.appendChild(option)}));const sourceSelector=document.getElementById("sourceSelector");function printBySelection(){const selectedCountry=countrySelector.options[countrySelector.selectedIndex].value,selectedSource=sourceSelector.options[sourceSelector.selectedIndex].value;pointsPrinter(country(selectedCountry),selectedSource)}sources.forEach((source=>{const option=document.createElement("option");option.value=source,option.text=source,source===defaultSource&&(option.selected=!0),sourceSelector.appendChild(option)})),countrySelector.addEventListener("change",printBySelection),sourceSelector.addEventListener("change",printBySelection)}async function pointsPrinter(country){if(country){const{abbreviation:abbreviation,name:name,coordinates:coordinates}=country;let points;map.setView(coordinates,5);const storedPoints=getWithTTL(name);if(storedPoints&&storedPoints.abbreviation===abbreviation?points=storedPoints.points:(points=await fetchFirmsData(abbreviation),setWithTTL(name,JSON.stringify({points:points,abbreviation:abbreviation}))),points.hotSpots&&points.hotSpots.length>0||points.fires&&points.fires.length>0)for(const type in points){const pointsType=points[type];for(let i=0;i<pointsType.length;i++){const points=pointsType[i];for(let i=0;i<points.length;i++){const{abbreviation:abbreviation,latitude:latitude,longitude:longitude,hour:hour,source:source,frp:frp}=points[i];let weatherData;const key=`[${latitude},${longitude}]`,storedWeatherData=getWithTTL(key);storedWeatherData&&storedWeatherData.abbreviation===abbreviation?weatherData=storedWeatherData.weatherData:(weatherData=await fetchOpenWeatherData(latitude,longitude),setWithTTL(key,JSON.stringify({abbreviation:abbreviation,weatherData:weatherData})));const{windDeg:windDeg,windSpeed:windSpeed,windGust:windGust,temp:temp,humidity:humidity,nearbyCity:nearbyCity}=weatherData,firePropagation=propagationAlgorithm(temp,humidity,windDeg,windSpeed,hour),toolTip=`\n              <h4>${nearbyCity}</h4>\n              <hr>\n              <p>Source: ${source}</p>\n              <p>Prediction: ${type.replace(/(?:^|\s)./g,(match=>match.toUpperCase())).replace(/([A-Z])/g," $1")}</p>\n              <p><strong>Propagation: ${Math.round(firePropagation)} meters/hour</strong></p>\n              <p>Radiative Power: ${frp}</p>\n            `;L.marker([latitude,longitude],{icon:redIcon}).addTo(map).bindTooltip(toolTip),drawLinesWithSecondaryLines(latitude,longitude,windDeg,firePropagation)}}}}}function setWithTTL(key,content,ttl=300){ttl*=1e3;const value={content:content,expiry:(new Date).getTime()+ttl};localStorage.setItem(key,JSON.stringify(value))}function getWithTTL(key){let value=null;const rawValue=localStorage.getItem(key);if(rawValue){const{content:content,expiry:expiry}=JSON.parse(rawValue),now=new Date;expiry&&now.getTime()>expiry?localStorage.removeItem(key):value=JSON.parse(content)}return value}main();